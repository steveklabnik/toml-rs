var searchIndex = {};
searchIndex['toml'] = {"items":[[0,"","toml","A TOML-parsing library"],[1,"Parser","","Parser for converting a string to a TOML `Value` instance."],[11,"errors","","A list of all errors which have occurred during parsing.",0],[1,"ParserError","","A structure representing a parse error."],[11,"lo","","The low byte at which this error is pointing at.",1],[11,"hi","","One byte beyond the last character at which this error is pointing at.",1],[11,"desc","","A human-readable description explaining what the error is.",1],[1,"Encoder","","A structure to transform Rust values into TOML values."],[11,"toml","","Output TOML that is emitted. The current version of this encoder forces\nthe top-level representation of a structure to be a table.",2],[1,"Decoder","","A structure to transform TOML values into Rust values."],[11,"toml","","The TOML value left over after decoding. This can be used to inspect\nwhether fields were decoded or not.",3],[1,"DecodeError","","Description for errors which can occur while decoding a type."],[11,"field","","Field that this error applies to.",4],[11,"kind","","The type of error which occurred while decoding,",4],[2,"Error","","Enumeration of errors which can occur while encoding a rust value into a\nTOML value."],[12,"NeedsKey","","Indication that a key was needed when a value was emitted, but no key\nwas previously emitted.",5],[12,"NoValue","","Indication that a key was emitted, but not value was emitted.",5],[12,"InvalidMapKeyLocation","","Indicates that a map key was attempted to be emitted at an invalid\nlocation.",5],[12,"InvalidMapKeyType","","Indicates that a type other than a string was attempted to be used as a\nmap key type.",5],[2,"Value","","Representation of a TOML value."],[12,"String","","",6],[12,"Integer","","",6],[12,"Float","","",6],[12,"Boolean","","",6],[12,"Datetime","","",6],[12,"Array","","",6],[12,"Table","","",6],[3,"encode","","Encodes an encodable value into a TOML value."],[3,"encode_str","","Encodes an encodable value into a TOML string."],[3,"decode","","Decodes a TOML value into a decodable type."],[3,"decode_str","","Decodes a string into a toml-encoded value."],[10,"fmt","","",1],[10,"new","","Creates a new parser for a string.",0],[10,"to_linecol","","Converts a byte offset from an error message to a (line, column) pair",0],[10,"parse","","Executes the parser, parsing the string contained within.",0],[10,"fmt","","",6],[10,"fmt","","",5],[10,"eq","","",4],[10,"ne","","",4],[10,"new","","Constructs a new encoder which will emit to the given output stream.",2],[10,"emit_nil","","",2],[10,"emit_uint","","",2],[10,"emit_u8","","",2],[10,"emit_u16","","",2],[10,"emit_u32","","",2],[10,"emit_u64","","",2],[10,"emit_int","","",2],[10,"emit_i8","","",2],[10,"emit_i16","","",2],[10,"emit_i32","","",2],[10,"emit_i64","","",2],[10,"emit_bool","","",2],[10,"emit_f32","","",2],[10,"emit_f64","","",2],[10,"emit_char","","",2],[10,"emit_str","","",2],[10,"emit_enum","","",2],[10,"emit_enum_variant","","",2],[10,"emit_enum_variant_arg","","",2],[10,"emit_enum_struct_variant","","",2],[10,"emit_enum_struct_variant_field","","",2],[10,"emit_struct","","",2],[10,"emit_struct_field","","",2],[10,"emit_tuple","","",2],[10,"emit_tuple_arg","","",2],[10,"emit_tuple_struct","","",2],[10,"emit_tuple_struct_arg","","",2],[10,"emit_option","","",2],[10,"emit_option_none","","",2],[10,"emit_option_some","","",2],[10,"emit_seq","","",2],[10,"emit_seq_elt","","",2],[10,"emit_map","","",2],[10,"emit_map_elt_key","","",2],[10,"emit_map_elt_val","","",2],[10,"new","","Creates a new decoder, consuming the TOML value to decode.",3],[10,"read_nil","","",3],[10,"read_uint","","",3],[10,"read_u64","","",3],[10,"read_u32","","",3],[10,"read_u16","","",3],[10,"read_u8","","",3],[10,"read_int","","",3],[10,"read_i64","","",3],[10,"read_i32","","",3],[10,"read_i16","","",3],[10,"read_i8","","",3],[10,"read_bool","","",3],[10,"read_f64","","",3],[10,"read_f32","","",3],[10,"read_char","","",3],[10,"read_str","","",3],[10,"read_enum","","",3],[10,"read_enum_variant","","",3],[10,"read_enum_variant_arg","","",3],[10,"read_enum_struct_variant","","",3],[10,"read_enum_struct_variant_field","","",3],[10,"read_struct","","",3],[10,"read_struct_field","","",3],[10,"read_tuple","","",3],[10,"read_tuple_arg","","",3],[10,"read_tuple_struct","","",3],[10,"read_tuple_struct_arg","","",3],[10,"read_option","","",3],[10,"read_seq","","",3],[10,"read_seq_elt","","",3],[10,"read_map","","",3],[10,"read_map_elt_key","","",3],[10,"read_map_elt_val","","",3],[10,"error","","",3],[10,"fmt","","",4],[4,"TomlArray","",""],[4,"TomlTable","",""],[10,"clone","","",6],[10,"eq","","",6],[10,"ne","","",6],[10,"same_type","","Tests whether this and another value have the same type.",6],[10,"type_str","","Returns a human-readable representation of the type of this value.",6],[10,"as_str","","Extracts the string of this value if it is a string.",6],[10,"as_integer","","Extracts the integer value if it is an integer.",6],[10,"as_float","","Extracts the float value if it is a float.",6],[10,"as_bool","","Extracts the boolean value if it is a boolean.",6],[10,"as_datetime","","Extracts the datetime value if it is a datetime.",6],[10,"as_slice","","Extracts the array value if it is an array.",6],[10,"as_table","","Extracts the table value if it is a table.",6],[10,"lookup","","Lookups for value at specified path.",6],[10,"from_str","","",6]],"paths":[[1,"Parser"],[1,"ParserError"],[1,"Encoder"],[1,"Decoder"],[1,"DecodeError"],[2,"Error"],[2,"Value"]]};
initSearch(searchIndex);
